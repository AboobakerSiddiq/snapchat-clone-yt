{"version":3,"sources":["features/cameraSlice.js","WebcamCapture.js","firebase.js","features/appSlice.js","Preview.js","Chat.js","Chats.js","ChatView.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["cameraSlice","createSlice","name","initialState","cameraImage","reducers","setCameraImage","state","action","payload","resetCameraImage","actions","selectCameraImage","camera","videoConstraints","width","height","facingMode","WebcamCapture","webcamRef","useRef","dispatch","useDispatch","history","useHistory","capture","useCallback","imageSrc","current","getScreenshot","push","className","audio","ref","screenshotFormat","onClick","fontSize","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","storage","provider","GoogleAuthProvider","appSlice","user","selectedImage","login","logout","selectImage","resetImage","selectUser","app","selectSelectedImage","Preview","useSelector","useEffect","replace","src","alt","id","uuid","putString","on","error","console","log","child","getDownloadURL","then","url","collection","add","imageUrl","username","read","profilePic","timestamp","FieldValue","serverTimestamp","classsName","Chat","doc","set","merge","Avatar","date","Date","toDate","toUTCString","Chats","useState","posts","setPosts","orderBy","onSnapshot","snapshot","docs","map","data","signOut","type","placeholder","ChatView","exit","isPlaying","duration","strokeWidth","size","colors","remainingTime","Login","Button","variant","signInWithPopup","result","displayName","photoURL","uid","catch","alert","message","App","onAuthStateChanged","authUser","path","exact","store","configureStore","reducer","appReducer","cameraReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4d755d3.chunk.js","sourcesContent":["import {  createSlice } from '@reduxjs/toolkit';\r\n\r\n\r\n\r\nexport const cameraSlice = createSlice({\r\n  name: 'camera',\r\n  initialState:{\r\n    cameraImage:null,\r\n  },\r\n  \r\n  reducers: {\r\n   \r\n    setCameraImage: (state, action) => {\r\n      state.cameraImage = action.payload;\r\n    },\r\n    resetCameraImage:(state)=>{\r\n        state.cameraImage=null;\r\n    }\r\n  },\r\n\r\n \r\n});\r\n\r\nexport const {  setCameraImage,resetCameraImage } = cameraSlice.actions;\r\n\r\n\r\nexport const selectCameraImage = (state) => state.camera.cameraImage;\r\n\r\n\r\nexport default cameraSlice.reducer;\r\n","import React,{ useCallback, useRef } from 'react';\r\nimport Webcam from 'react-webcam';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCameraImage } from './features/cameraSlice';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './WebcamCapture.css';\r\nconst videoConstraints={\r\n    width:250,\r\n    height:400,\r\n    facingMode:\"user\",\r\n};\r\n\r\n\r\n\r\nfunction WebcamCapture() {\r\nconst webcamRef=useRef(null);\r\nconst dispatch=useDispatch();\r\nconst history=useHistory();\r\nconst capture=useCallback(()=>{\r\n    const imageSrc=webcamRef.current.getScreenshot();\r\n    dispatch(setCameraImage(imageSrc));\r\n    history.push('/preview')\r\n    \r\n},[webcamRef])\r\n    return (\r\n        <div className='webcamCapture'>\r\n            <Webcam\r\n              audio={false}\r\n              height={videoConstraints.height}\r\n              ref={webcamRef}\r\n              screenshotFormat=\"image/jpeg\"\r\n              width={videoConstraints.width}\r\n              videoConstraints={videoConstraints} \r\n            />\r\n\r\n            <RadioButtonUncheckedIcon\r\n            className='webcamCapture_button'\r\n            onClick={capture}\r\n            fontSize=\"large\"\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WebcamCapture\r\n","import firebase from 'firebase';\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAF2wuJdEd2vVwE8FS3CzeYXEvMVNa-o9w\",\r\n    authDomain: \"snapchat-clone-yt-2302b.firebaseapp.com\",\r\n    projectId: \"snapchat-clone-yt-2302b\",\r\n    storageBucket: \"snapchat-clone-yt-2302b.appspot.com\",\r\n    messagingSenderId: \"901066597535\",\r\n    appId: \"1:901066597535:web:bf857a1f857552de89eeaa\"\r\n  };\r\n\r\n  const firebaseapp=firebase.initializeApp(firebaseConfig);\r\n  const db=firebaseapp.firestore();//check it a\r\n  const auth=firebase.auth();\r\n  const storage=firebase.storage();\r\n  const provider=new firebase.auth.GoogleAuthProvider();\r\n\r\n  export{db,auth,storage,provider};\r\n","import {  createSlice } from '@reduxjs/toolkit';\n\n\n\nexport const appSlice = createSlice({\n  name: 'app',\n  initialState:{\n    user:null,\n    selectedImage:null\n  },\n  \n  reducers: {\n   \n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout:(state)=>{\n      state.user=null;\n    },\n    selectImage:(state,action) =>{\n      state.selectedImage=action.payload\n    },\n    resetImage:(state) =>{\n      state.selectedImage =null\n    }\n  },\n\n \n});\n\nexport const {  login,logout,selectImage,resetImage } = appSlice.actions;\n\nexport const selectUser=(state) =>state.app.user;\n\nexport const selectSelectedImage=(state) =>state.app.selectedImage;\n\n\n\n\nexport default appSlice.reducer;\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { resetCameraImage, selectCameraImage } from './features/cameraSlice';\r\nimport \"./Preview.css\";\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport CropIcon from '@material-ui/icons/Crop';\r\nimport TimerIcon from '@material-ui/icons/Timer';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {v4 as uuid} from \"uuid\";\r\nimport {db, storage} from \"./firebase\"\r\nimport firebase from 'firebase';\r\nimport { selectUser } from './features/appSlice';\r\n\r\n\r\nfunction Preview() {\r\n    const cameraImage=useSelector(selectCameraImage);\r\n    const history=useHistory();\r\n    const dispatch=useDispatch();\r\n    const user=useSelector(selectUser);\r\n\r\n    useEffect(()=>{\r\n        if(!cameraImage){\r\n            history.replace('/')\r\n        }\r\n    },[cameraImage,history]);\r\nconst closePreview=()=>{\r\n    dispatch(resetCameraImage());\r\n    /*history.replace('/');*/\r\n};\r\nconst sendPost=() => {\r\n    const id=uuid();\r\n    const uploadTask=storage.ref(`posts/${id}`)\r\n    .putString(cameraImage,\"data_url\");\r\n\r\n    uploadTask.on('state_changed',null,(error)=>{\r\n        console.log(error)\r\n    },() =>{\r\n        storage.ref('posts').child(id).getDownloadURL().then((url)=>{\r\n            db.collection('posts').add({\r\n                imageUrl:url,\r\n                username:'Abu_Siddiq',\r\n                read:false,\r\n                profilePic:user.profilePic,\r\n                timestamp:firebase.firestore.FieldValue.serverTimestamp(),\r\n                \r\n            });\r\n            history.replace('/chats')\r\n        });\r\n\r\n    }\r\n    );\r\n\r\n};\r\n\r\n    return (<div className=\"preview\">\r\n    <CloseIcon onClick={closePreview} className='preview_close'/>\r\n    <div className=\"preview_toolbarRight\">\r\n    <TextFieldsIcon/>\r\n    <CreateIcon/>\r\n    <NoteIcon/>\r\n    <MusicNoteIcon/>\r\n    <AttachFileIcon/>\r\n    <CropIcon/>\r\n    <TimerIcon/>\r\n    </div>\r\n    <img src={cameraImage} alt=\"\"/>\r\n    <div onClick={sendPost} className=\"preview_footer\">\r\n    <h2>Send Now</h2>\r\n    <SendIcon  fontSize=\"small\" classsName='preview_sendIcon'/>\r\n    </div>\r\n    </div>)\r\n    \r\n}\r\n\r\nexport default Preview \r\n","import React from 'react';\r\nimport './Chat.css';\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport StopRoundedIcon from \"@material-ui/icons/StopRounded\";\r\nimport ReactTimeAgo from \"react-timeago\";\r\nimport { selectImage } from './features/appSlice';\r\nimport { useDispatch } from 'react-redux';\r\nimport { db } from './firebase';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nfunction Chat({id,username,timestamp,read,imageUrl,profilePic }) {\r\n    const dispatch=useDispatch();\r\n    const history=useHistory();\r\n\r\n\r\n    const open=()=>{\r\n        if(!read){\r\n            dispatch(selectImage(imageUrl));\r\n            db.collection('posts').doc(id).set({\r\n                read:true,\r\n            },\r\n            {merge:true}\r\n            );\r\n\r\n            history.push(\"/chats/view\")\r\n        }\r\n    }\r\n    return (\r\n        <div onClick={open} className=\"chat\">\r\n            <Avatar className=\"chat_avatar\" src={profilePic}/>\r\n            <div className=\"chat_info\">\r\n                <h4>{username}</h4>\r\n                <p>\r\n                {!read && 'Tap to view-'}{\"\"} <ReactTimeAgo date={new Date(timestamp ? timestamp.toDate() : \"\").toUTCString()}/></p>\r\n            </div>\r\n            {!read && <StopRoundedIcon className=\"chat_readIcon\"/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chat\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Chats.css';\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ChatBubbleIcon from '@material-ui/icons/ChatBubble';\r\nimport {auth, db} from \"./firebase\";\r\nimport Chat from './Chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from './features/appSlice';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport { useHistory } from 'react-router';\r\nimport { resetCameraImage } from './features/cameraSlice';\r\n\r\n\r\n\r\n\r\nfunction Chats() {\r\n    const [posts,setPosts]=useState([]);\r\n    const user=useSelector(selectUser);\r\n    const dispatch=useDispatch();\r\n    const history=useHistory();\r\n    useEffect(() => {\r\n        db.collection(\"posts\").orderBy('timestamp','desc').onSnapshot(snapshot =>\r\n            setPosts(snapshot.docs.map(doc=>({\r\n                id:doc.id,\r\n                data:doc.data(),\r\n            }))\r\n            )\r\n            );\r\n    },[]);\r\n    const takeSnap=()=>{\r\n        dispatch(resetCameraImage())\r\n        history.push(\"/\");\r\n    }\r\n    return (\r\n        <div className=\"chats\">\r\n            <div className=\"chats_header\">\r\n            <Avatar src={user.profilePic} onClick={() =>auth.signOut()} className='chats_avatar'/>\r\n            <div className=\"chats_search\">\r\n                <SearchIcon className=\"chats_searchIcon\"/>\r\n                <input type=\"text\" placeholder=\"Friends\"/>               \r\n                </div>\r\n                <ChatBubbleIcon className='chats_chatIcon'/>\r\n            </div>   \r\n            <div className='chat_posts'>\r\n            {posts.map(({id,data:{profilePic,username,timestamp,imageUrl,read}}) => (\r\n                <Chat\r\n                   key={id}\r\n                   id={id}\r\n                   username={username}\r\n                   timestamp={timestamp}\r\n                   imageUrl={imageUrl}\r\n                   read={read}\r\n                   profilePic={profilePic} \r\n                />\r\n            ))}\r\n            </div>\r\n            <RadioButtonUncheckedIcon\r\n            className='chats_takePicIcon'\r\n            onClick={takeSnap}\r\n            fontSize='large'\r\n            />\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default Chats\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './ChatView.css';\r\nimport { selectSelectedImage } from './features/appSlice';\r\nimport {CountdownCircleTimer} from \"react-countdown-circle-timer\";\r\n\r\nfunction ChatView() {\r\n    const selectedImage=useSelector(selectSelectedImage);\r\n    const history=useHistory();\r\n    useEffect(() =>{\r\n        if(!selectedImage){\r\n            exit();\r\n        }\r\n    },[]);\r\n    const exit=() =>{\r\n        history.replace('/chats')\r\n    }\r\n    return (\r\n        <div className='chatView'>\r\n            <img src={selectedImage} onClick={exit} alt=\"\"/>\r\n            <div className=\"chatView_timer\">\r\n            <CountdownCircleTimer\r\n            isPlaying\r\n            duration={10}\r\n            strokeWidth={6}\r\n            size={50}\r\n            colors={[\r\n                [\"#004777\",0.33],\r\n                [\"#F7B801\",0.33],\r\n                [\"#A30000\",0.33],\r\n            ]}\r\n            >\r\n            {({remainingTime}) =>{\r\n            if(remainingTime===0){\r\n                exit();\r\n            }\r\n\r\n                return remainingTime;\r\n            }}\r\n            </CountdownCircleTimer>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatView\r\n","import React from 'react';\r\nimport './Login.css';\r\nimport {Button} from \"@material-ui/core\";\r\nimport {login} from './features/appSlice'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {auth,provider} from \"./firebase\"\r\n\r\nfunction Login() {\r\nconst dispatch= useDispatch()\r\n\r\n    const signIn=() =>{\r\n        auth.signInWithPopup(provider).then(result =>{\r\n            dispatch(login({\r\n                username:result.user.displayName,\r\n                profilePic:result.user.photoURL,\r\n                id:result.user.uid,\r\n            }))\r\n        }).catch(error =>alert(error.message));\r\n    };\r\n    return (\r\n        <div className=\"Login\">\r\n            <div className=\"Login_container\">\r\n                <img src=\"https://scx2.b-cdn.net/gfx/news/2017/1-snapchat.jpg\" alt=\"\"/>\r\n                <Button variant='outline' onClick={signIn}>Sign in</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport WebcamCapture from './WebcamCapture';\nimport Preview from './Preview';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport Chats from './Chats';\nimport ChatView from './ChatView';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Login from \"./Login\";\nimport {auth} from './firebase';\nimport {login,logout} from './features/appSlice';\nimport {selectUser} from './features/appSlice';\n\nfunction App() {\n  const user=useSelector(selectUser);\n  const dispatch=useDispatch();\n\n  useEffect(()  =>{\n    auth.onAuthStateChanged((authUser) =>{\n     if(authUser){\n       dispatch(login({\n        username:authUser.displayName,\n        profilePic:authUser.photoURL,\n        id:authUser.uid,\n       }))\n     } else{{\n       dispatch(logout())\n     }}\n    })\n  },[])\n\n\n  return (\n    <div className=\"app\">\n    <Router>\n    {!user? (\n      <Login/>\n    ):(\n      <>\n      <img \n      className=\"app_logo\"\n      src=\"https://lakeridgenewsonline.com/wp-content/uploads/2020/04/snapchat.jpg\"\n       alt=\"\"/>\n      <div className=\"app_body\">\n      <div className =\"app_bodyBackGround\">\n      <Switch>\n    <Route path=\"/chats/view\">\n      <ChatView/>\n    </Route>\n    <Route path=\"/chats\">\n      <Chats/>\n    </Route>\n    <Route path=\"/preview\">\n      <Preview/>\n    </Route>\n    <Route exact path=\"/\">\n      <WebcamCapture/>\n    </Route>\n      </Switch>\n      </div>\n    \n    </div>\n    </>\n\n    )}\n    \n  </Router>  \n  </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport appReducer from '../features/appSlice';\nimport cameraReducer from '../features/cameraSlice';\n\nexport const store = configureStore({\n  reducer: {\n    app: appReducer,\n    camera:cameraReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}